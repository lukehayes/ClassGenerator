#!/usr/bin/env ruby

require 'fileutils'

#------------------------------------------------------------
# Get args from command line.
#------------------------------------------------------------
if ARGV.length < 2
  # Check if we have the correct number of arguments
  # exit the script if we don't.

  puts "I am missing some arguments..."
  puts "First argument should be a namespace."
  puts "Second should be the classname."
  exit
end

namespace = ARGV[0]
classname = ARGV[1]

#------------------------------------------------------------
# Get the location the script is running from and the
# directory that we are curently in.
#------------------------------------------------------------
dirname = __dir__
current_dir = Dir.pwd

puts "----------------------------------------------------------"
puts "Script located in: #{dirname}"
puts "Script running from: #{current_dir}"
puts "----------------------------------------------------------"
puts ""

#------------------------------------------------------------
# Define the header and source files.
#------------------------------------------------------------
header_template = <<HEREDOC
#pragma once

namespace @1 {

    class @2
    {
    public:
        @2();
        @2(const @2& other);
        @2(@2&& other);
        @2& operator=(const @2& other);
        @2& operator=(@2&& other);
        ~@2();
    };
}
HEREDOC

source_template = <<HEREDOC
#include "@3/@2.h"

namespace @1 {
    @2::@2() {}

    @2::@2(const @2& other) {}

    @2::@2(@2&& other) {}

    @2&
    @2::operator=(@2&& other)
    {
      if(this == &other) return *this;
      return *this;
    }

    @2&
    @2::operator=(const @2& other)
    {
      if(this == &other) return *this;
      return *this;
    }
    @2::~@2() {}
}
HEREDOC

include_dir     = "#{current_dir}/include"
source_dir      = "#{current_dir}/src"


#------------------------------------------------------------
# Replace the "tags" with namespace and classname.
#------------------------------------------------------------
header_template.gsub!("@1", namespace)
header_template.gsub!("@2", classname)
source_template.gsub!("@1", namespace)
source_template.gsub!("@2", classname)
source_template.gsub!("@3", namespace.downcase)

#------------------------------------------------------------
# Create new template files and write to them.
#------------------------------------------------------------
header_file = "#{classname}.h"
source_file = "#{classname}.cpp"

header_fh = File.open(header_file, "w")
source_fh = File.open(source_file, "w")

header_fh.write(header_template)
source_fh.write(source_template)

header_fh.close
source_fh.close

header_destination = "#{include_dir}/#{namespace.downcase}"
source_destination = "#{source_dir}/"

if Dir.exist? header_destination
  FileUtils.cp(header_file, header_destination)
else
  puts "Directory: #{header_destination} dir doesn't exist, creating it..."
  FileUtils.mkdir_p("#{header_destination}")
  FileUtils.cp(header_file, header_destination)
  puts "#{include_dir}/ Created."
end

if Dir.exist? source_destination
  FileUtils.cp(source_file, "#{source_destination}")
else
  puts "Directory: #{source_dir}/ dir doesn't exist, creating it..."
  FileUtils.mkdir source_destination
  FileUtils.cp(source_file, source_destination)
  puts "#{source_destination}/ Created."
end

FileUtils.rm header_file
FileUtils.rm source_file

puts "Created #{namespace}::#{classname} class."

