#!/usr/bin/env ruby

require 'fileutils'

dirname = __dir__
current_dir = Dir.pwd

#------------------------------------------------------------
# Define the header and source files.
#------------------------------------------------------------
header_template = <<HEREDOC
#pragma once

namespace @1 {

    class @2
    {
    public:
        @2();
        ~@2();
    };
}
HEREDOC

source_template = <<HEREDOC
#include "@1/@2.h"

namespace @1 {
    @2::@2() {}
    @2::~@2() {}
}
HEREDOC

include_dir     = "#{dirname}/include"
source_dir      = "#{dirname}/src"

#------------------------------------------------------------
# Get args from command line.
#------------------------------------------------------------

if ARGV.empty?
  puts "First argument should be a namespace."
  puts "Second should be the classname"
  exit
end

namespace = ARGV[0]
classname = ARGV[1]


#------------------------------------------------------------
# Replace the "tags" with namespace and classname.
#------------------------------------------------------------
puts header_template
header_template.gsub!("@1", namespace)
header_template.gsub!("@2", classname)
source_template.gsub!("@1", namespace)
source_template.gsub!("@2", classname)

#------------------------------------------------------------
# Create new template files and write to them.
#------------------------------------------------------------
header_file = "#{classname}.h"
source_file = "#{classname}.cpp"

header_fh = File.open(header_file, "w")
source_fh = File.open(source_file, "w")

header_fh.write(header_template)
source_fh.write(source_template)

header_fh.close
source_fh.close

header_destination = "#{include_dir}/#{namespace}"
source_destination = "#{source_dir}/"

p header_destination
p source_destination

if Dir.exist? header_destination
  FileUtils.cp(header_file, header_destination)
else
  puts "Directory: #{header_destination}/ dir doesn't exist, creating it..."
  FileUtils.mkdir_p("#{header_destination}/#{namespace}")
  FileUtils.cp(header_file, header_destination)
  puts "#{include_dir}/ Created."
end

if Dir.exist? source_destination
  FileUtils.cp(source_file, "#{source_destination}")
else
  puts "Directory: #{source_dir}/ dir doesn't exist, creating it..."
  FileUtils.mkdir source_destination
  FileUtils.cp(source_file, source_destination)
  puts "#{source_destination}/ Created."
end

FileUtils.rm header_file
FileUtils.rm source_file

puts "Created #{namespace}::#{classname} class."

